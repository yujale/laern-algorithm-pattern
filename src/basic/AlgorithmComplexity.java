package basic;

/**
 * 算法复杂度
 * 算法复杂度主要分为两种：
 * - 时间复杂度（time complexity）：估算程序指令的执行次数或者执行时间
 * - 空间复杂度（space complexity）：估算程序所需的存储空间
 *
 * 一般情况下，算法复杂度一般使用大 O 表示法，表示数据规模 n 对应的复杂度
 * 大 O 表示法主要分为以下几种：
 * - O(1)：常数复杂度，不管数据规模 n 多大，执行时间或者占用空间都是一个固定的常数,简称常数阶
 * - O(n)：线性复杂度，数据规模 n 增大 n 倍，执行时间或者占用空间增大 n 倍,简称线性阶
 * - O(n^2)：平方复杂度，数据规模 n 增大 n 倍，执行时间或者占用空间增大 n^2 倍,简称平方阶
 * - O(n^3)：立方复杂度，数据规模 n 增大 n 倍，执行时间或者占用空间增大 n^3 倍,简称立方阶
 * - O(logn)：对数复杂度，数据规模 n 增大 n 倍，执行时间或者占用空间增大 logn 倍,简称对数阶
 * - O(nlogn)：nlogn复杂度，数据规模 n 增大 n 倍，执行时间或者占用空间增大 nlogn 倍，,简称 nlogn 阶
 *上述几种从小到大的效率是：O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3)
 *
 */
public class AlgorithmComplexity {

}
